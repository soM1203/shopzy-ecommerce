{"ast":null,"code":"var _s = $RefreshSig$();\n// ProductGrid.js\nimport React, { useState, useEffect } from 'react';\nimport ProductCard from './ProductCard';\nimport API from '../services/api'; // Import your API config\n\nconst ProductGrid = ({\n  cart,\n  setCart\n}) => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchProducts();\n    fetchCartFromBackend();\n  }, []);\n\n  // Fetch products from backend\n  const fetchProducts = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('http://localhost:4000/api/products'); // Changed to 4000\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setProducts(data);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      setError('Failed to load products. Please try again later.');\n\n      // Fallback to mock data\n      const mockProducts = [{\n        id: 1,\n        name: \"Wireless Headphones\",\n        price: 99.99,\n        description: \"High-quality wireless headphones with noise cancellation\",\n        image: \"ðŸŽ§\"\n      }\n      // ... rest of your mock products\n      ];\n      setProducts(mockProducts);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch cart from backend\n  const fetchCartFromBackend = async () => {\n    try {\n      const response = await fetch('http://localhost:4000/api/cart'); // Changed to 4000\n      if (response.ok) {\n        const data = await response.json();\n        setCart(data.items || data); // Handle both formats\n      }\n    } catch (error) {\n      console.error('Error fetching cart from backend:', error);\n    }\n  };\n  const addToCart = async product => {\n    try {\n      const response = await fetch('http://localhost:4000/api/cart', {\n        // Changed to 4000\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          productId: product.id,\n          quantity: 1,\n          name: product.name,\n          price: product.price\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add item to cart');\n      }\n\n      // Refresh cart from backend\n      await fetchCartFromBackend();\n    } catch (error) {\n      console.error('Error adding to cart:', error);\n      // Fallback to local state\n      const existingItem = cart.find(item => item.id === product.id);\n      if (existingItem) {\n        setCart(cart.map(item => item.id === product.id ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item));\n      } else {\n        setCart([...cart, {\n          id: product.id,\n          name: product.name,\n          price: product.price,\n          quantity: 1\n        }]);\n      }\n    }\n  };\n\n  // ... rest of your component\n};\n_s(ProductGrid, \"3+N/VFIgZOBgubN9oS5aTzm2qqY=\");\n_c = ProductGrid;\nexport default ProductGrid;\nvar _c;\n$RefreshReg$(_c, \"ProductGrid\");","map":{"version":3,"names":["React","useState","useEffect","ProductCard","API","ProductGrid","cart","setCart","_s","products","setProducts","loading","setLoading","error","setError","fetchProducts","fetchCartFromBackend","response","fetch","ok","Error","status","data","json","console","mockProducts","id","name","price","description","image","items","addToCart","product","method","headers","body","JSON","stringify","productId","quantity","existingItem","find","item","map","_c","$RefreshReg$"],"sources":["C:/Users/Sayali/Desktop/submission/frontend/src/components/ProductGrid.js"],"sourcesContent":["// ProductGrid.js\nimport React, { useState, useEffect } from 'react';\nimport ProductCard from './ProductCard';\nimport API from '../services/api'; // Import your API config\n\nconst ProductGrid = ({ cart, setCart }) => {\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchProducts();\n    fetchCartFromBackend();\n  }, []);\n\n  // Fetch products from backend\n  const fetchProducts = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('http://localhost:4000/api/products'); // Changed to 4000\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      setProducts(data);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      setError('Failed to load products. Please try again later.');\n      \n      // Fallback to mock data\n      const mockProducts = [\n        { \n          id: 1, \n          name: \"Wireless Headphones\", \n          price: 99.99, \n          description: \"High-quality wireless headphones with noise cancellation\",\n          image: \"ðŸŽ§\"\n        },\n        // ... rest of your mock products\n      ];\n      setProducts(mockProducts);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch cart from backend\n  const fetchCartFromBackend = async () => {\n    try {\n      const response = await fetch('http://localhost:4000/api/cart'); // Changed to 4000\n      if (response.ok) {\n        const data = await response.json();\n        setCart(data.items || data); // Handle both formats\n      }\n    } catch (error) {\n      console.error('Error fetching cart from backend:', error);\n    }\n  };\n\n  const addToCart = async (product) => {\n    try {\n      const response = await fetch('http://localhost:4000/api/cart', { // Changed to 4000\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          productId: product.id,\n          quantity: 1,\n          name: product.name,\n          price: product.price\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to add item to cart');\n      }\n\n      // Refresh cart from backend\n      await fetchCartFromBackend();\n\n    } catch (error) {\n      console.error('Error adding to cart:', error);\n      // Fallback to local state\n      const existingItem = cart.find(item => item.id === product.id);\n      if (existingItem) {\n        setCart(cart.map(item =>\n          item.id === product.id \n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        ));\n      } else {\n        setCart([...cart, { \n          id: product.id,\n          name: product.name, \n          price: product.price, \n          quantity: 1 \n        }]);\n      }\n    }\n  };\n\n  // ... rest of your component\n};\n\nexport default ProductGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}