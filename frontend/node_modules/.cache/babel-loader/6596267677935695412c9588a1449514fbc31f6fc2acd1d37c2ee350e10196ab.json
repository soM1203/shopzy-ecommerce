{"ast":null,"code":"var _s = $RefreshSig$();\n// Cart.js\nimport React, { useState, useEffect } from 'react';\nconst Cart = ({\n  cart,\n  setCart,\n  setShowCheckout\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    fetchCartFromBackend();\n  }, []);\n  const fetchCartFromBackend = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:4000/api/cart'); // Changed to 4000\n      if (response.ok) {\n        const data = await response.json();\n        setCart(data.items || data); // Handle both formats\n      }\n    } catch (error) {\n      console.error('Error fetching cart:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const removeFromCart = async productId => {\n    try {\n      const response = await fetch(`http://localhost:4000/api/cart/${productId}`, {\n        // Changed to 4000\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to remove item');\n      }\n      await fetchCartFromBackend();\n    } catch (error) {\n      console.error('Error removing from cart:', error);\n      setCart(cart.filter(item => item.id !== productId));\n    }\n  };\n  const updateQuantity = async (productId, newQuantity) => {\n    if (newQuantity < 1) {\n      removeFromCart(productId);\n      return;\n    }\n    try {\n      // Use PUT for quantity updates if your backend supports it\n      const response = await fetch(`http://localhost:4000/api/cart/${productId}`, {\n        // Changed to 4000\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          quantity: newQuantity\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update quantity');\n      }\n      await fetchCartFromBackend();\n    } catch (error) {\n      console.error('Error updating quantity:', error);\n      setCart(cart.map(item => item.id === productId ? {\n        ...item,\n        quantity: newQuantity\n      } : item));\n    }\n  };\n  const getTotal = () => {\n    return cart.reduce((total, item) => total + item.price * item.quantity, 0).toFixed(2);\n  };\n\n  // ... rest of your component\n};\n_s(Cart, \"DlrQjwOD5XS1kcZJvMHoaf7KaZ8=\");\n_c = Cart;\nexport default Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useState","useEffect","Cart","cart","setCart","setShowCheckout","_s","isLoading","setIsLoading","fetchCartFromBackend","response","fetch","ok","data","json","items","error","console","removeFromCart","productId","method","Error","filter","item","id","updateQuantity","newQuantity","headers","body","JSON","stringify","quantity","map","getTotal","reduce","total","price","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Sayali/Desktop/submission/frontend/src/components/Cart.js"],"sourcesContent":["// Cart.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst Cart = ({ cart, setCart, setShowCheckout }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchCartFromBackend();\r\n  }, []);\r\n\r\n  const fetchCartFromBackend = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await fetch('http://localhost:4000/api/cart'); // Changed to 4000\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setCart(data.items || data); // Handle both formats\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching cart:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const removeFromCart = async (productId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:4000/api/cart/${productId}`, { // Changed to 4000\r\n        method: 'DELETE'\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to remove item');\r\n      }\r\n\r\n      await fetchCartFromBackend();\r\n      \r\n    } catch (error) {\r\n      console.error('Error removing from cart:', error);\r\n      setCart(cart.filter(item => item.id !== productId));\r\n    }\r\n  };\r\n\r\n  const updateQuantity = async (productId, newQuantity) => {\r\n    if (newQuantity < 1) {\r\n      removeFromCart(productId);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Use PUT for quantity updates if your backend supports it\r\n      const response = await fetch(`http://localhost:4000/api/cart/${productId}`, { // Changed to 4000\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ quantity: newQuantity })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update quantity');\r\n      }\r\n\r\n      await fetchCartFromBackend();\r\n\r\n    } catch (error) {\r\n      console.error('Error updating quantity:', error);\r\n      setCart(cart.map(item => \r\n        item.id === productId ? { ...item, quantity: newQuantity } : item\r\n      ));\r\n    }\r\n  };\r\n\r\n  const getTotal = () => {\r\n    return cart.reduce((total, item) => total + (item.price * item.quantity), 0).toFixed(2);\r\n  };\r\n\r\n  // ... rest of your component\r\n};\r\n\r\nexport default Cart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}